generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  auth0Id        String           @unique
  email          String           @unique
  username       String           @unique
  role           UserRole         @default(ORGANIZER)
  status         UserStatus       @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  profile        Profile?
  education      Education[]
  experience     Experience[]
  skills         Skill[]
  socialProfiles SocialProfile[]
  applications   Application[]
  createdEvents  Event[]
  teamMembers    TeamMember[]
  projects       Project[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  avatarUrl String?
  bio       String?  @db.Text
  gender    String?
  phone     String?
  country   String?
  city      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id              Int      @id @default(autoincrement())
  institutionName String
  degree          String
  fieldOfStudy    String
  graduationYear  Int?
  startDate       DateTime?
  endDate         DateTime?
  grade           String?
  activities      String?  @db.Text
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?  @db.Text
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id            Int      @id @default(autoincrement())
  skillName     String
  expertiseLevel String
  yearsOfExp    Int?
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SocialProfile {
  id       Int      @id @default(autoincrement())
  platform String   // GITHUB, LINKEDIN, TWITTER, PORTFOLIO, etc.
  url      String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  url         String?
  image       String?
  startDate   DateTime?
  endDate     DateTime?
  technologies String[] // Array of technology names
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id                Int                 @id @default(autoincrement())
  name              String
  type              EventType
  tagline           String?
  about             String?
  maxParticipants   Int?
  minTeamSize       Int?
  maxTeamSize       Int?
  mode              EventMode          @default(ONLINE)
  status            EventStatus        @default(DRAFT)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String
  createdBy         User               @relation(fields: [createdById], references: [id])
  timeline          EventTimeline?
  links             EventLink?
  branding          EventBranding?
  tracks            Track[]
  sponsors          Sponsor[]
  eventPeople       EventPerson[]
  applications      Application[]
  teams             Team[]
  projects          ProjectSubmission[]
}

model EventTimeline {
  id                Int      @id @default(autoincrement())
  eventId           Int      @unique
  eventStart        DateTime
  eventEnd          DateTime
  applicationsStart DateTime?
  applicationsEnd   DateTime?
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventLink {
  id           Int     @id @default(autoincrement())
  eventId      Int     @unique
  websiteUrl   String?
  micrositeUrl String?
  contactEmail String?
  socialLinks  Json?   // For storing multiple social media links
  event        Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventBranding {
  id        Int     @id @default(autoincrement())
  eventId   Int     @unique
  logoUrl   String?
  coverUrl  String?
  brandColor String?
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Track {
  id          Int     @id @default(autoincrement())
  eventId     Int
  name        String
  description String?
  prizes      Prize[]
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Prize {
  id          Int     @id @default(autoincrement())
  trackId     Int
  title       String
  description String?
  value       Float?
  track       Track   @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model Sponsor {
  id          Int         @id @default(autoincrement())
  eventId     Int
  name        String
  logoUrl     String?
  websiteUrl  String?
  tier        SponsorTier
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventPerson {
  id          Int             @id @default(autoincrement())
  eventId     Int
  name        String
  role        EventPersonRole
  imageUrl    String?
  description String?
  event       Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Team {
  id           Int                @id @default(autoincrement())
  eventId      Int
  name         String
  createdAt    DateTime          @default(now())
  event        Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  applications Application[]
  projects     ProjectSubmission[]
}

model TeamMember {
  id     Int            @id @default(autoincrement())
  teamId Int
  userId String
  role   TeamMemberRole
  team   Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id])
}

model Application {
  id         Int              @id @default(autoincrement())
  eventId    Int
  userId     String
  teamId     Int?
  status     ApplicationStatus
  createdAt  DateTime         @default(now())
  event      Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id])
  team       Team?            @relation(fields: [teamId], references: [id])
}

model ProjectSubmission {
  id          Int      @id @default(autoincrement())
  eventId     Int
  teamId      Int
  title       String
  description String
  githubUrl   String?
  demoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id])
}

enum UserRole {
  ADMIN
  ORGANIZER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum SocialPlatform {
  GITHUB
  LINKEDIN
  TWITTER
  PORTFOLIO
  OTHER
}

enum EventType {
  HACKATHON
  GENERAL_EVENT
}

enum EventMode {
  ONLINE
  OFFLINE
}

enum EventStatus {
  DRAFT
  PUBLISHED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum SponsorTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum EventPersonRole {
  SPEAKER
  JUDGE
}

enum TeamMemberRole {
  LEADER
  MEMBER
}
